import os
import sys
import shutil
import docker
import tarfile
from StaticInfo import StaticInfo
from abc import ABCMeta, abstractmethod

class ContainerManager:
    __metaclass__ = ABCMeta

    def __init__(self, containerName, mainService, packagePaths, userName="developer", gui=True):
        self.appName = containerName
        self.imageName = "img_" + containerName
        self.containerName = "container_" + containerName

        self.mainService = mainService
        self.packagePaths = packagePaths
        self.userName = userName
        self.gui = gui

        self.local_absPath_currentDir = os.path.dirname(os.path.realpath(__file__))

        self.local_relPath_homeFolder = StaticInfo.relPathDockerHomeFolders + "/UserHomeFolder_" + containerName
        self.local_relPath_DockerfilePath = StaticInfo.relPathDockerCreation + "/Dockerfile"

        self.checkFolderExistence()
        self.createDockerIgnoreFile()
        self.dockerClient = docker.from_env()

    @staticmethod
    def getContainerManager(distribution, pkgManager, containerName, mainService, packagePaths, userName="developer", gui=True):
        if distribution == "ubuntu" and pkgManager == "apt":
            return ContainerManagerUbuntu(containerName, mainService, packagePaths, userName=userName, gui=gui)
        else:
            sys.exit("Error in ContainerManager: not implemented for distribution \"%s\" and package manager \"%s\""
                     % (distribution, pkgManager))


    def runMainService(self, forceNew=False):
        image = self.getImage()
        if image is not None:
            self.runContainer(image, forceNew=forceNew)

    def checkFolderExistence(self):
        if not os.path.isdir(StaticInfo.relPathGuestRepoConfigs):
            sys.exit("ERROR: Folder for repository configuration files not found (looking for %s)" % StaticInfo.relPathGuestRepoConfigs)
        if not os.path.isdir(StaticInfo.relPathDockerHomeFolders):
            os.mkdir(StaticInfo.relPathDockerHomeFolders)
        if os.path.isdir(StaticInfo.relPathDockerCreation):
            shutil.rmtree(StaticInfo.relPathDockerCreation)
        os.mkdir(StaticInfo.relPathDockerCreation)

    def createDockerIgnoreFile(self):
        if os.path.exists(".dockerignore"):
            os.remove(".dockerignore")
        with open(".dockerignore", "a") as dockerignore:
            dockerignore.write("#This .dockerignore file was automatically generated by ContainerManagement.py\n")
            for line in os.listdir('.'):
                if not (line == ".dockerignore"\
                        or line == StaticInfo.relPathDocker\
                        or line == StaticInfo.relPathGuestRepoConfigs):
                    dockerignore.write(line + "\n")
            for line in os.listdir(StaticInfo.relPathDocker):
                path = StaticInfo.relPathDocker + "/" + line
                if not (path == StaticInfo.relPathDockerCreation or
                        path == StaticInfo.relPathDockerTempRepo or
                        path == StaticInfo.relPathDockerHomeFolders or
                        path == StaticInfo.relPathDockerRepoScannerUbuntu):
                    dockerignore.write(path + "\n")

    def getImage(self):
        print "\n=== Image retrieval"
        # Check if image already exists
        try:
            image = self.dockerClient.images.get(self.imageName)
        except docker.errors.NotFound:
            print "\t...failed. Image \"" + self.imageName + "\" does not exist."
            image = None
        return image

    def runContainer(self, image, forceNew=False):
        print "\n=== Run Container"

        # Check/Create persistent home folder
        if not os.path.isdir(self.local_relPath_homeFolder):
            os.mkdir(self.local_relPath_homeFolder)
        elif forceNew:
            print "\tforceNew was set to True: Existing folder for persistent home directory \"%s\" will be replaced!" % self.local_relPath_homeFolder
            shutil.rmtree(self.local_relPath_homeFolder)
            os.mkdir(self.local_relPath_homeFolder)
        else:
            print "\tUsing existing folder \"%s\" as persistent home directory" % self.local_relPath_homeFolder

        # Check if container already exists
        try:
            container = self.dockerClient.containers.get(self.containerName)
            if forceNew:
                print "\tforceNew was set to True. Existing container will be removed and created anew."
                container.remove(force=True)
                container = None
            else:
                print "\tUsing already existing container \"%s\"." % self.containerName
                container = None
        except docker.errors.NotFound:
            print "\tContainer \"%s\" does not exist yet. Proceeding to create new." % self.containerName
            container = None

        if container is None:
            absPath_DockerHomeFolder = self.local_absPath_currentDir+'/'+self.local_relPath_homeFolder

            volumeDict = {
                absPath_DockerHomeFolder:
                    {'bind': '/home/developer', 'mode': 'rw'}
            }
            if self.gui:
                volumeDict['/tmp/.X11-unix'] = {'bind': '/tmp/.X11-unix', 'mode': 'rw'}
                volumeDict['/dev/shm'] = {'bind': '/dev/shm', 'mode': 'rw'}

            container = self.dockerClient.containers.create(image,
                                                    name=self.containerName,
                                                    stdin_open=True,
                                                    tty=True,
                                                    auto_remove=True,
                                                    network_mode="host",
                                                    devices=["/dev/snd"],
                                                    environment=["DISPLAY=unix"+os.environ['DISPLAY']],
                                                    volumes=volumeDict,
                                                    command="/bin/sh")
        container.start()
        print "\n\tContainer created."
        print "\tAccess it by running \"docker attach %s\" in a terminal." % self.containerName
        print "\tNote that this container with %s was automatically created." % self.mainService
        print "\tFor specific configurations, modify the Dockerfile in \"%s\" and run on custom Dockerfile."\
              % self.local_relPath_DockerfilePath

    def imageExists(self):
        try:
            self.dockerClient.images.get(self.imageName)
            return True
        except docker.errors.NotFound:
            return False

    @abstractmethod
    def createImage(self, forceNew=False): pass

class ContainerManagerUbuntu(ContainerManager):
    def __init__(self, containerName, mainService, packagePaths, userName="developer", gui=True):
        super(ContainerManagerUbuntu, self).__init__(containerName, mainService, packagePaths, userName="developer", gui=True)
        self.container_repoFolder = "/var/tempRepository"
        self.container_tmpSourceConfigPath = "/etc/apt/sources.list.d/tempRepo.list"

    def checkFolderExistence(self):
        super(ContainerManagerUbuntu, self).checkFolderExistence()
        if not os.path.isfile(StaticInfo.relPathGuestRepoConfigUbuntu):
            sys.exit("ERROR in container creation: required file \"%s\" missing." % StaticInfo.relPathGuestRepoConfigUbuntu)

    def createImage(self, forceNew=False, defaultDockerfile=True):
        print "Creating image"
        if self.imageExists():
            if forceNew:
                print "\tNew Creation of image \"" + self.imageName + "\" was forced. Existing image will be removed."
                self.dockerClient.images.remove(self.imageName, force=True)
                creationRequired = True
            else:
                print "\tImage \"%s\" already exists." % self.imageName
                creationRequired =  False
        else:
            creationRequired = True
        if creationRequired:
            print "\tCreating new image..."
            self.createRepository()
            if defaultDockerfile:
                # Check/Remove previous Dockerfile
                if os.path.exists(self.local_relPath_DockerfilePath):
                    os.remove(self.local_relPath_DockerfilePath)

                self.createDockerfile()
            print "Building docker image"
            '''
            client = docker.APIClient(base_url='unix://var/run/docker.sock')
            for line in client.build(path=self.local_absPath_currentDir,
                                     tag=self.imageName,
                                     dockerfile= self.local_relPath_DockerfilePath):
                print line
            '''
            self.dockerClient.images.build(path=self.local_absPath_currentDir,
                                                   tag=self.imageName,
                                                   dockerfile= self.local_relPath_DockerfilePath,
                                                   rm=True)

            shutil.rmtree(StaticInfo.relPathDockerTempRepo)

    def createRepository(self):
        print "\n=== Repository Creation"
        # Check/Remove previous temporary repository
        if os.path.exists(StaticInfo.relPathDockerTempRepo):
            shutil.rmtree(StaticInfo.relPathDockerTempRepo)
        os.mkdir(StaticInfo.relPathDockerTempRepo)

        print "copy packages to temporary repository \"%s\"" % StaticInfo.relPathDockerTempRepo
        # Copy relevant packages to temporary repository
        for srcPath in self.packagePaths:
            dstPath = StaticInfo.relPathDockerTempRepo + "/" + srcPath.rsplit("/",1)[-1]
            shutil.copy(srcPath,dstPath)

        # Scan packages with helping container
        print "scanning packages"
        RepoScannerUbuntu.runRepoScanner()

    def createDockerfile(self):
        continueRUN = " && \\\n"
        dockerfileString = ""
        if self.gui:
            dockerfileString += "FROM remmers/ubuntubase-gui\n"
        else:
            dockerfileString += "FROM ubuntu:latest\n"

        dockerfileString += "\n" + self.getDockerfileUserPart() + "\n"

        dockerfileString += "COPY " + StaticInfo.relPathDockerTempRepo + " " + self.container_repoFolder + "\n"

        dockerfileString += "RUN\techo \"deb file://" + self.container_repoFolder + " ./\" >> " + self.container_tmpSourceConfigPath + continueRUN
        dockerfileString += "\tDEBIAN_FRONTEND=noninteractive apt-get update -qq -o Dir::Etc::sourcelist=\"" + self.container_tmpSourceConfigPath + "\"" + continueRUN
        dockerfileString += "\tDEBIAN_FRONTEND=noninteractive apt-get install " + self.appName + " -qqy --allow-unauthenticated" + continueRUN
        dockerfileString += "\trm " + self.container_tmpSourceConfigPath + continueRUN
        dockerfileString += "\tDEBIAN_FRONTEND=noninteractive apt-get autoremove -qqy" + continueRUN
        dockerfileString += "\tDEBIAN_FRONTEND=noninteractive apt-get clean -qqy" + continueRUN
        dockerfileString += "\trm -rf /var/lib/apt/lists/*\n"

        #dockerfileString +="\nUSER " + self.userName + "\n"
        dockerfileString +="CMD /usr/bin/" + self.appName

        with open(self.local_relPath_DockerfilePath, "a") as dockerfile:
            dockerfile.write(dockerfileString)

    def getDockerfileUserPart(self):
        continueRUN = " && \\\n"
        dockerfileUserPart  = "# Do not run container as root\n"
        dockerfileUserPart += "# for now: same UID/GID as current user (otherwise no gui because of xhost)\n"
        dockerfileUserPart += "RUN\texport uid=1001 gid=1001" + continueRUN
        dockerfileUserPart += "\tgroupadd --system --gid ${gid} " + self.userName + continueRUN
        dockerfileUserPart += "\tuseradd  --system --gid ${gid} --groups audio,video --uid ${uid} " + self.userName + continueRUN
        dockerfileUserPart += "\tmkdir -p /home/" + self.userName + continueRUN
        dockerfileUserPart += "\tchown -R ${uid}:${gid} /home/" + self.userName + "\n"
        return dockerfileUserPart

class RepoScanner:
    __metaclass__ = ABCMeta
    absPath_currentDir = os.path.dirname(os.path.realpath(__file__))
    absPath_tempRepoFolder = absPath_currentDir + "/" + StaticInfo.relPathDockerTempRepo

class RepoScannerUbuntu(RepoScanner):
    relPath_DockerfilePath = StaticInfo.relPathDockerRepoScannerUbuntu + "/Dockerfile"
    relPath_scanScript = StaticInfo.relPathDockerRepoScannerUbuntu + "/scanpackages.sh"

    container_repoFolder = "/var/tempRepository"
    imageName = "img_reposcanner_ubuntu"
    containerName = "container_repoScannerUbuntu"
    dockerClient = docker.from_env()

    @staticmethod
    def runRepoScanner():
        image = RepoScannerUbuntu.getImage()
        RepoScannerUbuntu.runContainer(image)

    @staticmethod
    def getImage(forceNew=False):
        print "Image retrieval repoScanner"
        # Check if image already exists
        try:
            image = RepoScannerUbuntu.dockerClient.images.get(RepoScannerUbuntu.imageName)
            if forceNew:
                print "new Creation of image \"" + RepoScannerUbuntu.imageName + "\" was forced. Proceeding to build Image."
                RepoScannerUbuntu.dockerClient.images.remove(RepoScannerUbuntu.imageName)
                image = RepoScannerUbuntu.createImage()
            else:
                print "Image \"" + RepoScannerUbuntu.imageName + "\" already exists. Proceeding with existing Image."
        except docker.errors.NotFound:
            print "Image \"" + RepoScannerUbuntu.imageName + "\" does not exist yet. Proceeding to build Image."
            image = RepoScannerUbuntu.createImage()
        return image

    @staticmethod
    def createImage():
        return RepoScannerUbuntu.dockerClient.images.build(
                                                path=RepoScannerUbuntu.absPath_currentDir,
                                                tag=RepoScannerUbuntu.imageName,
                                                dockerfile= RepoScannerUbuntu.relPath_DockerfilePath,
                                                rm=True)

    @staticmethod
    def runContainer(image):
        print "run Container repoScanner"

        # Repo folder missing
        if not os.path.exists(StaticInfo.relPathDockerTempRepo):
            sys.exit(
                "ERROR: No repository folder for scanning found (looking for \"%s\")" % StaticInfo.relPathDockerTempRepo)
        # Repo folder empty
        if not os.listdir(StaticInfo.relPathDockerTempRepo):
            sys.exit(
                "ERROR: Repository folder is empty! (looking in \"%s\")" % StaticInfo.relPathDockerTempRepo)


        volumeDict = {
            RepoScanner.absPath_tempRepoFolder:
                {'bind': RepoScannerUbuntu.container_repoFolder, 'mode': 'rw'}
        }
        return RepoScannerUbuntu.dockerClient.containers.run(image,
                                                name=RepoScannerUbuntu.containerName,
                                                stdin_open=True,
                                                tty=True,
                                                remove=True,
                                                network_mode="host",
                                                volumes=volumeDict)